<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode-451:根据字符出现频率排序</title>
    <link href="/2021/07/03/Springboot-JWT/"/>
    <url>/2021/07/03/Springboot-JWT/</url>
    
    <content type="html"><![CDATA[<h3 id="题目叙述"><a href="#题目叙述" class="headerlink" title="# 题目叙述"></a># 题目叙述</h3><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p><p>示例 1:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">输入:<br><span class="hljs-string">&quot;tree&quot;</span><br><br>输出:<br><span class="hljs-string">&quot;eert&quot;</span><br><br>解释:<br>&#x27;e&#x27;出现两次，&#x27;r&#x27;和&#x27;t&#x27;都只出现一次。<br>因此&#x27;e&#x27;必须出现在&#x27;r&#x27;和&#x27;t&#x27;之前。此外，<span class="hljs-string">&quot;eetr&quot;</span>也是一个有效的答案。<br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入:</span><br><span class="hljs-string">&quot;cccaaa&quot;</span><br><br><span class="hljs-section">输出:</span><br><span class="hljs-string">&quot;cccaaa&quot;</span><br><br><span class="hljs-section">解释:</span><br>&#x27;c&#x27;和&#x27;a&#x27;都出现三次。此外，<span class="hljs-string">&quot;aaaccc&quot;</span>也是有效的答案。<br>注意<span class="hljs-string">&quot;cacaca&quot;</span>是不正确的，因为相同的字母必须放在一起。<br></code></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入:</span><br><span class="hljs-string">&quot;Aabb&quot;</span><br><br><span class="hljs-section">输出:</span><br><span class="hljs-string">&quot;bbAa&quot;</span><br><br><span class="hljs-section">解释:</span><br>此外，<span class="hljs-string">&quot;bbaA&quot;</span>也是一个有效的答案，但<span class="hljs-string">&quot;Aabb&quot;</span>是不正确的。<br>注意&#x27;A&#x27;和&#x27;a&#x27;被认为是两种不同的字符。<br></code></pre></td></tr></table></figure><h3 id="尝试思路"><a href="#尝试思路" class="headerlink" title="# 尝试思路"></a># 尝试思路</h3><p>乍一看题，直接二维hash，数组长度为52【大写26个 + 小写26个】 + 冒泡，输出就ok了。</p><p>然而 … </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">8</span> / <span class="hljs-number">32</span> 个通过测试用例<br>状态：执行出错<br>提交时间：<span class="hljs-number">1</span> 小时前<br>执行出错信息：<br>java.lang.ArrayIndexOutOfBoundsException: Index <span class="hljs-number">-15</span> out <span class="hljs-keyword">of</span> bounds <span class="hljs-keyword">for</span> <span class="hljs-built_in">length</span> <span class="hljs-number">52</span><br>  <span class="hljs-keyword">at</span> <span class="hljs-built_in">line</span> <span class="hljs-number">11</span>, Solution.frequencySort<br>  <span class="hljs-keyword">at</span> <span class="hljs-built_in">line</span> <span class="hljs-number">54</span>, __DriverSolution__.__helper__<br>  <span class="hljs-keyword">at</span> <span class="hljs-built_in">line</span> <span class="hljs-number">84</span>, __Driver__.main<br>最后执行的输入：<br><span class="hljs-string">&quot;2a554442f544asfasssffffasss&quot;</span><br></code></pre></td></tr></table></figure><p>哦~ 原来是有数字的啊。 将二维hash数组换为HashMap， 这时候就体现了数组干不了的事情了(或者说这就是Map的强大之处)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">frequencySort</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    StringBuilder result = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-comment">// 定义哈希字典</span><br>    Map&lt;Character, Integer&gt; dic = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>    <span class="hljs-comment">// 遍历，并更新K-V</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : s.toCharArray()) &#123;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(dic.containsKey(c)) &#123;<br>            temp = dic.get(c);<br>            temp ++;<br>        &#125;<br>        dic.put(c, temp);<br>    &#125;<br><br>    <span class="hljs-comment">// 转换list排序</span><br>    List&lt;Map.Entry&lt;Character, Integer&gt;&gt; dicList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(dic.entrySet());<br><br>    <span class="hljs-comment">// list排序，添加Comparator比较器，匿名Lambda</span><br>    dicList.sort((o1, o2) -&gt; (o2.getValue() - o1.getValue()));<br><br>    <span class="hljs-comment">// 输出</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; dicList.size();i ++) &#123;<br>        <span class="hljs-keyword">if</span>(dicList.get(i).getValue() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> times = dicList.get(i).getValue(); times &gt; <span class="hljs-number">0</span>; times --) &#123;<br>                result.append(dicList.get(i).getKey());<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result.toString();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我可爱的小博客</title>
    <link href="/2021/07/01/%E6%88%91%E5%8F%AF%E7%88%B1%E7%9A%84%E5%B0%8F%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/07/01/%E6%88%91%E5%8F%AF%E7%88%B1%E7%9A%84%E5%B0%8F%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="我可爱的小博客"><a href="#我可爱的小博客" class="headerlink" title="我可爱的小博客"></a>我可爱的小博客</h1><p>之前用Typora + Server搭过一篇，发现并不是很好用。</p><p>其实现在也挺狗血的，但毕竟有自己的东西，勉强接受吧…</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://lucifer-rossweisse.github.io/2021/01/12/github+hexo%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/">参考教程</a></p><p>之后将hexo 和 github绑定起来就可以了。</p><p>选一个自己喜欢的主题，Github搜一下Hexo theme有一大堆，不过也没自己喜欢的那个 …</p><h4 id="废话终于说完了"><a href="#废话终于说完了" class="headerlink" title="废话终于说完了"></a>废话终于说完了</h4><p>最后感谢自己的支持！</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
